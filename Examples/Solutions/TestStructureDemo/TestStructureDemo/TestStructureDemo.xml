<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestStructureDemo</name>
    </assembly>
    <members>
        <member name="T:TestStructureDemo.BusinessLayer.Models.UserName">
            <summary>
            Provides a functionality related to the user name and its business rules.
            </summary>
        </member>
        <member name="P:TestStructureDemo.BusinessLayer.Models.UserName.Name">
            <summary>
            Gets or sets a name value of the user name.
            </summary>
        </member>
        <member name="M:TestStructureDemo.BusinessLayer.Models.UserName.#ctor(System.String)">
            <summary>
            Initialize a new instance of the UserName class from the input string.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TestStructureDemo.BusinessLayer.Models.UserName.ValidateAllBusinessRules(System.String)">
            <summary>
            Validates all business rules which are applied to the user name. Returns true if the input string pass-through all tests, false otherwise.
            </summary>
            <param name="name">An input string which must be validated.</param>
            <returns>True if the input string pass-through all tests, false otherwise.</returns>
            <remarks>This approach is based on the premise that business rules implementation will not be shared. Advantage of this approach is that all validation methods can be somehow enforced during class's life cycle.
            <remarks>A disadvantage is that business rules implementation can't be shared.</remarks>
            <para>Alternative approach would be to make a public ValidationMethod class a do a cherry picking with validation methods within this method.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TestStructureDemo.BusinessLayer.Models.UserName.ValidationMethods" -->
        <member name="M:TestStructureDemo.BusinessLayer.Models.UserName.ValidationMethods.ValidateLength(System.String)">
            <summary>
            Validates if the input string has a valid length.
            </summary>
            <param name="name">An input string which must be validated.</param>
            <returns>True if the input string has sufficient length, false otherwise.</returns>
        </member>
        <member name="M:TestStructureDemo.BusinessLayer.Models.UserName.ValidationMethods.ValidateFuck(System.String)">
            <summary>
            Validates if the input string contains an inappropriate words. Returns true if the input string contains an inappropriate word, false otherwise.
            </summary>
            <param name="name">An input string which must be validated.</param>
            <returns>True if the input string has no inappropriate words, false otherwise.</returns>
        </member>
        <member name="M:TestStructureDemo.BusinessLayer.Models.UserName.ValidationMethods.CheckWords(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks the input string if contains any word which is specified.
            </summary>
            <param name="name">An input string in which the listed words will be searched.</param>
            <param name="wordsToCheck">A collection of words to search within the input string.</param>
            <returns>True if the input string contains any of the word listed in the input word collection, false otherwise.</returns>
        </member>
        <member name="T:TestStructureDemo.Utils.ValidationMethods">
            <summary>
            Serves as an container for all business rules methods related to the user name.
            <para>This is an alternative approach to the internal class.</para>
            </summary>
        </member>
        <member name="M:TestStructureDemo.Utils.ValidationMethods.ValidateLength(System.String,System.Int32)">
            <summary>
            Validates if the input string has a valid length.
            </summary>
            <param name="name">An input string which must be validated.</param>
            <param name="length"></param>
            <returns>True if the input string has sufficient length, false otherwise.</returns>
        </member>
        <member name="M:TestStructureDemo.Utils.ValidationMethods.ValidateFuck(System.String)">
            <summary>
            Validates if the input string contains an inappropriate words. Returns true if the input string contains an inappropriate word, false otherwise.
            </summary>
            <param name="name">An input string which must be validated.</param>
            <returns>True if the input string has no inappropriate words, false otherwise.</returns>
        </member>
        <member name="M:TestStructureDemo.Utils.ValidationMethods.CheckWords(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks the input string if contains any word which is specified.
            </summary>
            <param name="name">An input string in which the listed words will be searched.</param>
            <param name="wordsToCheck">A collection of words to search within the input string.</param>
            <returns>True if the input string contains any of the word listed in the input word collection, false otherwise.</returns>
        </member>
    </members>
</doc>
